@page "/app/products/location/manage"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdministrationPolicy")]
<PageTitle>Locations</PageTitle>

<ThreeSectionsTemplate>
	<Col9Template>
		<AdminHomeHeader />
		<NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" BackgroundColor="@BackgroundColor.Secondary()" DeactivatedColor="@Color.Dark()" />
		<div class="row bg-danger py-2 mt-3" style="border-radius: 20px">
			<div class="col-lg-12 col-sm-12 col-md-12">
				<div class="card border-1 shadow-lg table-responsive mb-2" style="border-radius: 20px">
					<div class="card-header p-2">
						<button class="btn btn-outline-danger float-end" @onclick="CreateLocationBtnClicked">
							<i class="mdi mdi-plus"></i> Create Location
						</button>
					</div>
					<div class="card-body">
						<NetcodeHubDataGrid ContentBGColor="@Color.Primary()"
											HeaderFont="@Font.TimesNewRoman()"
											HeaderSize="@Size.Large()"
											ContentFont="@Font.Georgia()"
											DataGridFormat="@DataGridFormat.Striped()"
											HeaderBGColor="@Color.Danger()">
							<HeaderTemplate>
								<tr>
									<th>Serial No</th>
									<th>ID</th>
									<th>Name</th>
									<th><span id="manageHeader" style="display: none;">MANAGE</span></th>
								</tr>
							</HeaderTemplate>

							<ContentTemplate>
								@if (Locations == null)
								{
									<tr>
										<td colspan="4" class="text-center mb-2">
											<span>No data found</span>
										</td>
									</tr>
								}
								else
								{
									var listData = Locations.Skip(SkipValue).Take(TakeValue).ToList();
									int sn = 1;
									@foreach (var item in listData)
									{
										string id = item.Id.ToString();
										<tr @onmouseover="() => ToggleIcons(id, true)" @onmouseout="() => ToggleIcons(id, false)" id="td_@item.Id">
											<td>@sn</td>
											<td id="td1_@item.Id">@item.Id</td>
											<td id="td2_@item.Id">@item.Name</td>
											<td>
												<i @onmouseover="() => ToggleEditIcon(id, true)" @onmouseout="() => ToggleEditIcon(id, false)" id="editIcon_@item.Id" @onclick="(() =>EditClicked(item))" class="mdi mdi-grease-pencil text-info cursorStyle" style="display: none;"></i>
												@if (CanDelete)
												{
													<i id="separatorIcon_@item.Id" class="mdi mdi-dots-vertical text-primary" style="display: none;"></i>
													<i @onmouseover="() => ToggleDeleteIcon(id, true)" @onmouseout="() => ToggleDeleteIcon(id, false)" id="deleteIcon_@item.Id" @onclick="(() =>DeleteClicked(item))" class="mdi mdi-delete text-danger cursorStyle" style="display: none;"></i>
												}
												else
												{
													<i id="separatorIcon_@item.Id" class="mdi mdi-dots-vertical text-primary" style="display: none;"></i>
													<i @onmouseover="() => ToggleDeleteIcon(id, true)" @onmouseout="() => ToggleDeleteIcon(id, false)" id="deleteIcon_@item.Id" class="mdi mdi-delete text-secondary" style="display: none;"></i>
												}
											</td>
										</tr>
										{
											sn++;
										}
									}
								}
								@if (Loading)
								{
									<tr>
										<td colspan="4" class="text-center mb-2">
											<div class="spinner-border text-primary" role="status" style="z-index: 99;">
												<span class="visually-hidden">Processing...</span>
											</div>
										</td>
									</tr>
								}
							</ContentTemplate>

						</NetcodeHubDataGrid>
					</div>
					<div class="card-footer">
						<SfPager @ref="@Page" PageSize=10 NumericItemsCount=4 TotalItemsCount=Locations.Count() ItemClick="Click" />
					</div>
				</div>
			</div>
		</div>
	</Col9Template>
	<Col3Template><Banner /></Col3Template>
	<FooterTemplate><Footer /></FooterTemplate>
</ThreeSectionsTemplate>
@if (ShowConfirmation)
{
	<Confirmation Action="Confirm" BoostrapClass="bg-white border-2 border-danger p-3 p-md-5 rounded shadow-lg position-absolute top-50 start-50 translate-middle z-index-50" @ref="confirmation" Instruction="Are you sure you want to delete?" />
}
<NetcodeHubToast @ref="ToastComponent" />
<Modal @bind-Open="IsOpen"
	   BootstrapClass="border-danger p-2 ml-2"
	   CustomStyle="position: relative; left: 40vh; right: 40w; top: 30vh">

	<ContentContent>
		<div class="card border-1 shadow-sm">
			<div class="card-header">
				<span class="text-center text-danger fw-bold">@ModalTitle</span>
				<i class="mdi mdi-close text-primary fw-bold float-end fs-4 cursorStyle" @onclick="CloseModal"></i>
			</div>
			<div class="card-body">
				<EditForm Model="LocationModel" OnValidSubmit="SaveLocation">
					<DataAnnotationsValidator />
					<div class="form-group">
						<FloatingText Label="Location Name" @bind-Value="LocationModel.Name" class="form-control" />
					</div>
					<div class="form-group mt-3 mb-3">
						@if (Loading)
						{
							<GenericSpinnerButton ButtonClass="btn btn-danger" Text="Saving..." />
						}
						else
						{
							<button type="submit" class="btn btn-danger float-end">Save</button>
						}
					</div>
					<ValidationSummary />

				</EditForm>
				@* </div> *@
			</div>
		</div>
	</ContentContent>
</Modal>


@code {
	private Dictionary<string, string> BreadCrumbs = new Dictionary<string, string>
	{
		{"Home", "app/home"},
		{"Manage Locations", null!}
	};

	string ModalTitle = "Create New Location";
	SfPager? Page;
	NetcodeHubToast? ToastComponent;
	public bool Loading { get; set; } = false;
	public bool IsOpen { get; set; } = false;
	Confirmation? confirmation;
	public int SkipValue;
	public int TakeValue = 10;
	public bool ShowConfirmation { get; set; } = true;


	[CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
	private IEnumerable<GetProductResponseDTO> Pros { get; set; } = [];
	private IEnumerable<GetLocationResponseDTO> Locations { get; set; } = [];
	private AddLocationRequestDTO LocationModel { get; set; } = new();
	ClaimsPrincipal? User;
	private HubConnection? hubConnection;
	bool CanDelete = false;

	protected async override Task OnInitializedAsync()
	{
		User = (await UserAuthState!).User;
		CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);
		homeGenericState.StateChanged += StateButtonClicked;

		await GetLocations();

		hubConnection = softHubConnectionService.GetHubConnection();
		hubConnection.On<string>("Notify", async (clientId) =>
		{
			await CallWhenNotified();
		});
		if (hubConnection == null)
			await hubConnection!.StartAsync();
	}

	async Task CallWhenNotified()
	{
		await InvokeAsync(async () =>
		{
			StateHasChanged();
			await adminState.GetActiveOrdersCount();
		});
	}

	// Navigate to order pages when state buttons are clicked
	void StateButtonClicked()
	{
		string adminOrderUrl = "app/administration/products/orders";
		if (homeGenericState.IsAdmin)
			NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
	}

	public async Task GetLocations()
	{
		Loading = true;
		using var scope = serviceProvider.CreateScope();
		var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
		Locations = await mediator.Send(new GetAllLocationsQuery());
		Loading = false;
	}

	private async Task ToggleIcons(string itemId = null!, bool isHovering = false) => await js.InvokeVoidAsync("ToggleIcons", itemId, isHovering);
	private async Task ToggleEditIcon(string itemId = null!, bool isHovering = false) => await js.InvokeVoidAsync("ToggleEditIcon", itemId, isHovering);
	private async Task ToggleDeleteIcon(string itemId = null!, bool isHovering = false) => await js.InvokeVoidAsync("ToggleDeleteIcon", itemId, isHovering);

	void OpenModal() => IsOpen = true;

	void CreateLocationBtnClicked()
	{
		ModalTitle = "Create New Location";
		OpenModal();
	}

	void CloseModal() => IsOpen = false;

	private Guid IdHolder { get; set; } = Guid.Empty;

	async Task SaveLocation()
	{
		Loading = true;
		await Task.Delay(1000);
		ServiceResponse response = new(false, null);
		if (IdHolder != Guid.Empty)
		{
			var update = LocationModel.Adapt(new UpdateLocationRequestDTO());
			update.Id = IdHolder;
			using var scope = serviceProvider.CreateScope();
			var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
			response = await mediator.Send(new UpdateLocationCommand(update));

			await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
				{
					UserId = User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
					Title = "Update Location method called",
					Description = response.Message,
					OperationState = response.Flag,
					Date = DateTime.Now.Date
				});

			// Loading = false;
			// StateHasChanged();
		}
		else
		{
			using var scope = serviceProvider.CreateScope();
			var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
			response = await mediator.Send(new CreateLocationCommand(LocationModel));

			await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
				{
					UserId = User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
					Title = "Create Location method called",
					Description = response.Message,
					OperationState = response.Flag,
					Date = DateTime.Now.Date
				});
		}

		if (response.Flag)
		{
			await GetLocations();
			await ToastComponent!.ShowSuccessToast("Info", response.Message);
			LocationModel = new();
			CloseModal();
		}
		else
		{
			await ToastComponent!.ShowErrorToast("Alert", response.Message);
		}

		Loading = false;
	}

	public void Click(PagerItemClickEventArgs args)
	{
		SkipValue = (args.CurrentPage * Page!.PageSize) - Page.PageSize;
		TakeValue = Page.PageSize;
	}

	void EditClicked(GetLocationResponseDTO Location)
	{
		ModalTitle = "Update Location";
		IdHolder = Location.Id;
		Location.Adapt(LocationModel);
		OpenModal();
	}

	void DeleteClicked(GetLocationResponseDTO Location)
	{
		IdHolder = Location.Id;
		Location.Adapt(LocationModel);
		ShowConfirmation = true;
		confirmation?.Show();
	}

	async Task Confirm()
	{
		Loading = true;
		await Task.Delay(2000);
		using var scope = serviceProvider.CreateScope();
		var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
		var result = await mediator.Send(new DeleteLocationCommand(IdHolder));

		await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
			{
				UserId = User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
				Title = "Delete Location method called",
				Description = result.Message,
				OperationState = result.Flag,
				Date = DateTime.Now.Date
			});

		if (result.Flag)
		{
			await GetLocations();
			await ToastComponent!.ShowSuccessToast("Info", result.Message);
			LocationModel = new();
			ShowConfirmation = false;
			IdHolder = Guid.Empty;
		}
		else
		{
			await ToastComponent!.ShowErrorToast("Alert", result.Message);
		}
		Loading = false;
	}

	public void Dispose() => homeGenericState.StateChanged -= StateButtonClicked;
}
