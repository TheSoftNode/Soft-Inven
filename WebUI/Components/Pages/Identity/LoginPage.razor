@page "/Account/Login"

@* <section class="vh-100 vw-100" style="background-color: #9A616D;"> *@
<section class="vh-100 vw-100" style="background-color: #fff">
	<div class="container py-3 h-100">
		<div class="row d-flex justify-content-center align-items-center h-100">
			<div class="col col-md-6">
				<div class="card border-primary shadow-lg" style="border-radius: 1.5rem;">
					<div class="row g-0">
						<div class="col-md-12 col-lg-12 d-flex align-items-center ">
							<div class="card-body p-4  p-lg-5 ">

								<EditForm Model="LoginModel"  OnValidSubmit="LoginUserAsync" FormName="login" Enhance>

									<DataAnnotationsValidator />
									@if (@ErrorMessage != "")
									{
										<div class="alert alert-danger">
											@ErrorMessage
										</div>
									}
				
									<div class="d-flex justify-content-center align-items-center mb-5 pb-1">
										<i class="fas fa-cubes fa-2x me-3" style="color:#ff6219;"></i>
										<span class="h1 fw-bold mb-0 b_1">Soft<span class="b2 text-primary">Inven</span></span>
									</div>

									<h5 class="fw-medium mb-3 text-center pb-3" style="letter-spacing: 1px; color: rgb(55, 2, 105);">Sign into your account</h5>

									<div data-mdb-input-init class="form-outline mb-7">
										<label for="email" class="form-label">Email Address</label>
										<InputText @bind-Value="LoginModel.Email" class="form-control form-control-lg rounded-2" autocomplete="username" aria-required="true" placeholder="name@example.com" />
										<ValidationMessage class="mt-2 text-danger small" For="@(() => LoginModel.Email)" />
									</div>

									<div data-mdb-input-init class="form-outline mb-7">
										<label for="email" class="form-label">Password</label>
										<InputText type="password" 
											@bind-Value="LoginModel.Password" 
											class="form-control form-control-lg rounded-2 " 
											autocomplete="current-password" 
											aria-required="true" placeholder="password" />
										<ValidationMessage class="mt-2 text-danger small" For="@(() => LoginModel.Password)" />
									</div>

									<div class="pt-1 mb-7">
										@if (Loading)
										{
											<button class="btn btn-primary rounded-1 btn-block" type="submit">Login.....</button>
										}
										else
										{
											<button class="btn btn-primary rounded-1 btn-block" type="submit">Login</button>
										}
									</div>

									<p class="mb-5 pb-lg-2 text-center" style="color: #393f81;">
										Don't have an account? 
										<a href="#" class="small" style="color:#ff6219;">Please visit any of our branches for registration</a>
									</p>

									<div class="d-flex justify-content-between">
										@* <a class="small d-inline text-primary" href="#!">Forgot password?</a> *@
										<span>
											<a href="#!" class="small text-muted">Terms of use.</a>
											<a href="#!" class="small text-muted">Privacy policy</a>
										</span>
									</div>
									
								</EditForm>

							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>
<NetcodeHubToast @ref="ToastComponent" />

@code {
	string ErrorMessage = "";
	// public bool IsBusy { get; set; } = false;
	private bool Loading = false;

	NetcodeHubToast? ToastComponent;

	[SupplyParameterFromForm]
	private LoginUserRequestDTO LoginModel { get; set; } = new();

	private async Task LoginUserAsync()
	{
		Loading = true;
		ErrorMessage = "";
		// IsBusy = true;

		var response = await accountService.LoginAsync(LoginModel);
		if (!response.Flag)
		{
			// IsBusy = false;
			Loading = false;
			ErrorMessage = response.Message;
			await ToastComponent!.ShowErrorToast("Alert", response.Message);
			return;
		}
		// IsBusy = false;
		await ToastComponent!.ShowSuccessToast("Info", response.Message);
		Loading = false;
		NavManager.NavigateTo(uri: "app/home", true);
	}

	[CascadingParameter]
	public Task<AuthenticationState>? ClientAuthState { get; set; }


	protected override async Task OnInitializedAsync()
	{
		try
		{
			if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
				NavManager.NavigateTo("app/home", false, true);
		}
		catch {}
	}
} 

